// Code generated by "enumer -type=AppMode -json"; DO NOT EDIT.

package appmode

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AppModeName = "DevelopmentProduction"

var _AppModeIndex = [...]uint8{0, 11, 21}

const _AppModeLowerName = "developmentproduction"

func (i AppMode) String() string {
	if i < 0 || i >= AppMode(len(_AppModeIndex)-1) {
		return fmt.Sprintf("AppMode(%d)", i)
	}
	return _AppModeName[_AppModeIndex[i]:_AppModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AppModeNoOp() {
	var x [1]struct{}
	_ = x[Development-(0)]
	_ = x[Production-(1)]
}

var _AppModeValues = []AppMode{Development, Production}

var _AppModeNameToValueMap = map[string]AppMode{
	_AppModeName[0:11]:       Development,
	_AppModeLowerName[0:11]:  Development,
	_AppModeName[11:21]:      Production,
	_AppModeLowerName[11:21]: Production,
}

var _AppModeNames = []string{
	_AppModeName[0:11],
	_AppModeName[11:21],
}

// AppModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AppModeString(s string) (AppMode, error) {
	if val, ok := _AppModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AppModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AppMode values", s)
}

// AppModeValues returns all values of the enum
func AppModeValues() []AppMode {
	return _AppModeValues
}

// AppModeStrings returns a slice of all String values of the enum
func AppModeStrings() []string {
	strs := make([]string, len(_AppModeNames))
	copy(strs, _AppModeNames)
	return strs
}

// IsAAppMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AppMode) IsAAppMode() bool {
	for _, v := range _AppModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AppMode
func (i AppMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AppMode
func (i *AppMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AppMode should be a string, got %s", data)
	}

	var err error
	*i, err = AppModeString(s)
	return err
}
